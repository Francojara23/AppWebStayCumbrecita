import logging
import re
from typing import Dict, List, Tuple, Any, Optional
from ..core.config import settings

logger = logging.getLogger(__name__)

class QueryClassifier:
    def __init__(self):
        self.classification_patterns = {
            "metodos_pago": [
                # Patrones espec√≠ficos para consultas sobre m√©todos/formas de pago
                r"c√≥mo.*pagar|como.*pagar|c√≥mo.*puedo.*pagar|como.*puedo.*pagar",
                r"formas.*de.*pago|formas.*pago|m√©todos.*de.*pago|m√©todos.*pago|metodos.*pago",
                # üîß AGREGANDO PATRONES PARA "MEDIOS DE PAGO" (FALTABA!)
                r"medios.*de.*pago|medios.*pago|qu√©.*medios.*pago|que.*medios.*pago",
                r"cu√°les.*medios.*pago|cuales.*medios.*pago|qu√©.*medios.*tienen|que.*medios.*tienen",
                r"medios.*de.*pago.*tienen|medios.*pago.*tienen|medios.*aceptan|medios.*reciben",
                r"opciones.*de.*pago|opciones.*pago|modalidades.*de.*pago|modalidades.*pago",
                r"qu√©.*m√©todos.*pago|que.*m√©todos.*pago|qu√©.*formas.*pago|que.*formas.*pago",
                r"cu√°les.*m√©todos.*pago|cuales.*m√©todos.*pago|cu√°les.*formas.*pago|cuales.*formas.*pago",
                r"qu√©.*opciones.*pago|que.*opciones.*pago|cu√°les.*opciones.*pago|cuales.*opciones.*pago",
                # üÜï PATRONES M√ÅS ESPEC√çFICOS para capturar "cuales son los metodos de pago"
                r"cu√°les.*son.*los.*m√©todos|cuales.*son.*los.*m√©todos|cu√°les.*son.*los.*metodos|cuales.*son.*los.*metodos",
                r"cu√°les.*son.*las.*formas|cuales.*son.*las.*formas|qu√©.*m√©todos.*hay|que.*m√©todos.*hay",
                r"cu√°les.*m√©todos.*hay|cuales.*m√©todos.*hay|qu√©.*formas.*hay|que.*formas.*hay",
                r"de.*qu√©.*formas.*pagar|de.*que.*formas.*pagar|de.*qu√©.*manera.*pagar",
                r"c√≥mo.*se.*puede.*pagar|como.*se.*puede.*pagar|c√≥mo.*efectuar.*pago|como.*efectuar.*pago",
                r"qu√©.*opciones.*tengo.*pagar|que.*opciones.*tengo.*pagar",
                r"cu√°les.*son.*formas.*pagar|cuales.*son.*formas.*pagar|cu√°les.*son.*opciones.*pagar",
                r"formas.*de.*abonar|formas.*abonar|modalidades.*abonar|opciones.*abonar",
                r"m√©todos.*aceptan|metodos.*aceptan|formas.*aceptan|opciones.*aceptan"
            ],
            "precios": [
                # Patrones refinados para PRECIOS (excluyendo m√©todos de pago)
                r"precio|costo|tarifa|vale|cuesta|cobran|dinero|plata|euros?|dolares?|pesos?",
                r"cuanto|cu√°nto|valor|monto|importe",
                r"barato|caro|econ√≥mico|costoso",
                r"descuento|promoci√≥n|oferta|rebaja",
                r"que.*precio|precio.*tiene|que.*cuesta|cuanto.*sale",
                r"sale|por.*noche|por.*d√≠a|tarifas",
                # üÜï Patrones espec√≠ficos para consultas corteses de precios
                r"cu√°l.*precio|cual.*precio|cuales.*precios|cu√°les.*precios",
                r"cu√°l.*tarifa|cual.*tarifa|cuales.*tarifas|cu√°les.*tarifas", 
                r"cu√°l.*costo|cual.*costo|cuales.*costos|cu√°les.*costos",
                r"cu√°l.*valor|cual.*valor|cuales.*valores|cu√°les.*valores",
                r"qu√©.*precio|que.*precio|qu√©.*costo|que.*costo",
                r"qu√©.*tarifa|que.*tarifa|qu√©.*valor|que.*valor",
                r"cu√°nto.*sale|cuanto.*sale|cu√°nto.*cuesta|cuanto.*cuesta",
                r"cu√°nto.*abonar|cuanto.*abonar",
                # üîß REFINADOS: Solo "cu√°nto pagar" sin "c√≥mo pagar"
                r"cu√°nto.*tengo.*que.*pagar|cuanto.*tengo.*que.*pagar",
                r"cu√°nto.*debo.*pagar|cuanto.*debo.*pagar",
                r"cu√°nto.*deber√≠a.*pagar|cuanto.*deber√≠a.*pagar",
                r"a.*cu√°nto.*asciende|a.*cuanto.*asciende",
                r"cu√°nto.*equivale|cuanto.*equivale",
                r"me.*podr√≠as.*indicar.*costo|me.*podr√≠as.*indicar.*precio",
                r"me.*podr√≠as.*decir.*costo|me.*podr√≠as.*decir.*precio",
                r"estad√≠a.*precio|estad√≠a.*costo|estadia.*precio|estadia.*costo",
                r"habitaci√≥n.*precio|habitaci√≥n.*costo|habitacion.*precio|habitacion.*costo",
                r"para.*esas.*fechas.*precio|para.*esas.*fechas.*costo",
                r"ser√≠a.*precio|seria.*precio|ser√≠a.*costo|seria.*costo"
            ],
            "disponibilidad": [
                r"disponible|disponibilidad|libre|liberado|ocupado",
                r"lugar|lugares|espacio|espacios|plaza|plazas",
                r"habitaci√≥n libre|habitaci√≥n disponible|cupo|cupos|vacante|vacantes",
                r"opci√≥n|opciones|algo libre|algo disponible",
                r"te queda|ten√©s algo|hay algo|queda algo",
                r"lugar disponible|lugares disponibles|plaza disponible|plazas disponibles",
                r"fecha|d√≠a|semana|mes|calendario|finde|fin de semana",
                r"puedo|podemos|se puede|hay lugar|hay espacio",
                r"cuando|cu√°ndo|desde|hasta|entre|para|en"
            ],
            "hospedaje_servicios": [
                # üîß PATRONES EXPL√çCITOS Y FUERTES para servicios del hospedaje
                r"servicios\s+(del\s+)?hospedaje|servicios\s+(del\s+)?hotel|servicios\s+(del\s+)?lugar",
                r"que\s+servicios\s+tiene\s+(el\s+)?hospedaje|que\s+servicios\s+tiene\s+(el\s+)?hotel",
                r"con\s+que\s+servicios\s+cuenta\s+(el\s+)?hospedaje|con\s+que\s+servicios\s+cuenta\s+(el\s+)?hotel",
                r"comodidades\s+(del\s+)?hospedaje|comodidades\s+(del\s+)?hotel|comodidades\s+(del\s+)?lugar",
                r"que\s+tiene\s+(el\s+)?hospedaje|que\s+tiene\s+(el\s+)?hotel|que\s+tiene\s+(el\s+)?lugar",
                r"instalaciones\s+(del\s+)?hospedaje|instalaciones\s+(del\s+)?hotel|instalaciones\s+(del\s+)?lugar",
                r"amenities\s+(del\s+)?hospedaje|amenities\s+(del\s+)?hotel|amenities\s+(del\s+)?lugar",
                r"facilidades\s+(del\s+)?hospedaje|facilidades\s+(del\s+)?hotel|facilidades\s+(del\s+)?lugar",
                r"qu√©\s+ofrece\s+(el\s+)?hospedaje|que\s+ofrece\s+(el\s+)?hospedaje|qu√©\s+ofrece\s+(el\s+)?hotel",
                r"servicios\s+generales|comodidades\s+generales|instalaciones\s+generales",
                r"servicios\s+incluidos|que\s+incluye\s+(la\s+)?estad√≠a|que\s+incluye\s+(el\s+)?hospedaje",
                r"instalaciones\s+comunes|√°reas\s+comunes|servicios\s+compartidos|zonas\s+comunes",
                # üÜï PATRONES M√ÅS DIRECTOS para capturar consultas comunes
                r"servicios\s+tiene\s+(el\s+)?hospedaje|servicios\s+tiene\s+(el\s+)?hotel",
                r"que\s+servicios\s+tiene\s+el\s+hospedaje|que\s+servicios\s+tiene\s+el\s+hotel",
                r"servicios\s+del\s+hospedaje|servicios\s+del\s+hotel",
                r"que\s+servicios.*hospedaje|que\s+servicios.*hotel",
                r"hospedaje.*servicios|hotel.*servicios",
                # Servicios espec√≠ficos del hospedaje (no de habitaciones)
                r"piscina|pileta|spa|gimnasio|restaurant|restaurante|bar|cafeter√≠a|cafeteria",
                r"estacionamiento|parking|garage|garaje|recepci√≥n|lobby|reception",
                r"wifi\s+gratuito|internet\s+gratis|desayuno\s+incluido|jard√≠n|jardin|terraza\s+com√∫n",
                r"lavander√≠a|lavanderia|servicio\s+de\s+limpieza|limpieza\s+general",
                r"seguridad|vigilancia|caja\s+fuerte|safe|conserjer√≠a|conserje"
            ],
            "habitacion_servicios": [
                r"servicios de la habitaci√≥n|que tiene la habitaci√≥n|comodidades de la suite",
                r"incluye la habitaci√≥n|equipamiento|amenities de la habitaci√≥n",
                r"qu√© hay en la habitaci√≥n|servicios privados|comodidades privadas",
                r"qu√© viene con la habitaci√≥n|equipado con|cuenta con",
                r"suite.*tiene|habitaci√≥n.*incluye|habitaci√≥n.*cuenta",
                r"aire acondicionado|calefacci√≥n|tv|televisi√≥n|minibar|refrigerador",
                r"ba√±o privado|jacuzzi|hidromasaje|balc√≥n|terraza privada",
                r"cocina equipada|kitchenette|escritorio|√°rea de trabajo",
                # üÜï Patrones para referencias contextuales  
                r"esa habitaci√≥n|esta habitaci√≥n|la habitaci√≥n|dicha habitaci√≥n",
                r"esa suite|esta suite|la suite|dicha suite",
                r"con qu√©.*cuenta|con que.*cuenta|qu√©.*incluye|que.*incluye",
                r"servicios.*cuenta|comodidades.*tiene|amenities.*incluye",
                r"cuenta con|viene con|incluye.*habitaci√≥n|tiene.*habitaci√≥n"
            ],
            "servicio_especifico": [
                # Patrones para consultas sobre servicios espec√≠ficos individuales
                r"¬ø.*tiene.*jacuzzi|tiene.*jacuzzi|hay.*jacuzzi|cuenta.*jacuzzi",
                r"¬ø.*tiene.*wifi|tiene.*wifi|hay.*wifi|cuenta.*wifi",
                r"¬ø.*tiene.*aire|tiene.*aire.*acondicionado|hay.*aire|cuenta.*aire",
                r"¬ø.*tiene.*balc√≥n|tiene.*balc√≥n|hay.*balc√≥n|cuenta.*balc√≥n",
                r"¬ø.*tiene.*cocina|tiene.*cocina|hay.*cocina|cuenta.*cocina",
                r"¬ø.*tiene.*tv|tiene.*tv|hay.*tv|cuenta.*tv|tiene.*televisi√≥n",
                r"¬ø.*tiene.*estacionamiento|tiene.*estacionamiento|hay.*estacionamiento",
                r"¬ø.*tiene.*desayuno|tiene.*desayuno|hay.*desayuno|incluye.*desayuno",
                r"¬ø.*tiene.*limpieza|tiene.*limpieza|hay.*limpieza|incluye.*limpieza",
                r"¬ø.*tiene.*piscina|tiene.*piscina|hay.*piscina|cuenta.*piscina",
                # Patrones generales para cualquier servicio espec√≠fico
                r"¬ø.*tiene.*\w+|¬ø.*hay.*\w+|¬ø.*cuenta.*con.*\w+|¬ø.*incluye.*\w+",
                r"tiene.*\w+\?|hay.*\w+\?|cuenta.*con.*\w+\?|incluye.*\w+\?",
                r"la.*habitaci√≥n.*tiene.*\w+|el.*hospedaje.*tiene.*\w+",
                r"disponible.*\w+|dispone.*de.*\w+|posee.*\w+"
            ],
            "servicios_multiples_habitaciones": [
                # Patrones para consultas sobre servicios de m√∫ltiples habitaciones
                r"servicios.*cada.*habitaci√≥n|servicios.*cada.*habitacion|servicios.*de.*cada.*habitaci√≥n",
                r"servicios.*todas.*habitaciones|servicios.*todas.*las.*habitaciones",
                r"servicios.*de.*todas|servicios.*de.*las.*tres|servicios.*las.*tres",
                r"que.*servicios.*cada.*habitaci√≥n|que.*servicios.*cada.*habitacion",
                r"que.*servicios.*todas.*habitaciones|que.*servicios.*todas.*las.*habitaciones",
                r"cada.*habitaci√≥n.*servicios|cada.*habitacion.*servicios|todas.*habitaciones.*servicios",
                r"servicios.*habitaciones.*disponibles|servicios.*de.*habitaciones.*disponibles",
                r"comodidades.*cada.*habitaci√≥n|comodidades.*todas.*habitaciones",
                r"amenities.*cada.*habitaci√≥n|amenities.*todas.*habitaciones",
                r"que.*tiene.*cada.*habitaci√≥n|que.*tiene.*cada.*habitacion|que.*tiene.*cada.*una"
            ],
            "proceso_reserva": [
                # Patrones OPTIMIZADOS y M√ÅS AMPLIOS para consultas sobre c√≥mo reservar
                r"c√≥mo.*puedo.*hacer.*para.*reservar|como.*puedo.*hacer.*para.*reservar",
                r"c√≥mo.*puedo.*hacer.*una.*reserva|como.*puedo.*hacer.*una.*reserva", 
                r"c√≥mo.*puedo.*reservar|como.*puedo.*reservar",
                r"como.*hago.*para.*reservar|c√≥mo.*hago.*para.*reservar",
                r"como.*reservo|c√≥mo.*reservo|como.*me.*reservo",
                r"qu√©.*pasos.*debo.*seguir.*para.*reservar|que.*pasos.*debo.*seguir.*para.*reservar",
                r"c√≥mo.*puedo.*asegurar.*mi.*reserva|como.*puedo.*asegurar.*mi.*reserva",
                r"qu√©.*procedimientos.*debo.*seguir.*para.*reservar|que.*procedimientos.*debo.*seguir.*para.*reservar",
                r"cu√°les.*son.*los.*pasos.*para.*hacer.*una.*reserva|cuales.*son.*los.*pasos.*para.*hacer.*una.*reserva",
                r"c√≥mo.*puedo.*confirmar.*mi.*reserva|como.*puedo.*confirmar.*mi.*reserva",
                r"qu√©.*debo.*hacer.*para.*asegurar.*mi.*lugar|que.*debo.*hacer.*para.*asegurar.*mi.*lugar",
                r"c√≥mo.*reservar|como.*reservar|quiero.*reservar|deseo.*reservar",
                r"hacer.*reserva|realizar.*reserva|efectuar.*reserva|proceder.*reserva",
                r"reservar.*habitaci√≥n|reservar.*habitacion|reservar.*suite",
                r"proceso.*de.*reserva|proceso.*reserva|procedimiento.*reserva",
                r"pasos.*reserva|pasos.*para.*reservar|instrucciones.*reserva",
                # üÜï PATRONES ADICIONALES M√ÅS DIRECTOS
                r"^como.*puedo.*reservar.*$|^c√≥mo.*puedo.*reservar.*$",
                r"reservar.*esto|reservar.*esta|reservar.*eso|reservar.*esa",
                r"la.*reservo|lo.*reservo|me.*la.*reservo|me.*lo.*reservo",
                r"continuar.*reserva|seguir.*reserva|proceder.*con.*reserva",
                r"confirmar.*reserva|asegurar.*reserva|apartar.*habitaci√≥n|apartar.*suite"
            ],
            "capacidad_excedida_especifica": [
                # Patrones para cuando usuario menciona habitaci√≥n espec√≠fica con exceso de capacidad
                r"suite.*taina.*para.*\d+.*personas?",
                r"suite.*martina.*para.*\d+.*personas?", 
                r"suite.*bony.*para.*\d+.*personas?",
                r"habitaci√≥n.*\w+.*para.*\d+.*personas?",
                r"reservar.*la.*suite.*\w+.*para.*\d+",
                r"quiero.*la.*\w+.*para.*\d+.*personas?",
                r"me.*interesa.*la.*\w+.*para.*\d+.*personas?"
            ],
            "capacidad_excedida_general": [
                # Patrones para consultas generales que exceden capacidad
                r"para.*\d+.*personas?.*disponible",
                r"disponible.*para.*\d+.*personas?",
                r"somos.*\d+.*personas?.*disponible",
                r"grupo.*de.*\d+.*personas?.*lugar",
                r"familia.*de.*\d+.*disponibilidad",
                r"\d+.*hu√©spedes?.*disponible",
                r"lugar.*para.*\d+.*personas?",
                r"habitaci√≥n.*para.*\d+.*personas?.*disponible"
            ],
            "reserva_multiple": [
                # Patrones para cuando usuario quiere reservar m√∫ltiples habitaciones
                r"reservar.*ambas?.*habitaciones?",
                r"reservar.*las.*dos.*habitaciones?",
                r"quiero.*reservar.*ambas?",
                r"puedo.*reservar.*ambas?",
                r"reservar.*\d+.*habitaciones?",
                r"quiero.*las.*dos.*habitaciones?",
                r"me.*quedo.*con.*ambas?",
                r"tomar.*ambas?.*habitaciones?",
                r"apartar.*ambas?.*habitaciones?",
                r"ambas?.*quisiera.*reservar",
                r"ambas?.*quiero.*reservar", 
                r"las.*dos.*quisiera.*reservar",
                r"ambas?.*me.*interesa",
                r"reservar.*dos.*habitaciones?",
                r"confirmar.*ambas?.*habitaciones?",
                r"proceder.*con.*ambas?",
                r"generar.*enlace.*para.*ambas?",
                r"continuar.*con.*ambas?.*habitaciones?"
            ],
            "servicios": [
                r"servicio|servicios|incluye|incluido|ofrece|ofrecen",
                r"limpieza|toallas|sabanas|amenities",
                r"que tiene|que hay|cuenta con|dispone"
            ],
            "ubicacion": [
                r"donde|d√≥nde|ubicaci√≥n|ubicado|direcci√≥n|lugar",
                r"cerca|lejos|distancia|kil√≥metros|metros|km",
                r"centro|downtown|ciudad|pueblo|barrio",
                r"transporte|colectivo|bus|taxi|uber",
                r"como llegar|c√≥mo llegar|llego|ir|voy"
            ],
            "checkin": [
                r"check.?in|check.?out|entrada|salida|llegada",
                r"hora|horario|tiempo|cuando llegar|cu√°ndo llegar",
                r"llave|key|c√≥digo|acceso|ingreso",
                r"recepci√≥n|reception|front desk"
            ],
            "habitaciones": [
                r"habitaci√≥n|habitaciones|cuarto|room|rooms",
                r"cama|bed|matrimonial|individual|doble|single|double",
                r"ba√±o|bathroom|ducha|shower|ba√±era",
                r"vista|view|balc√≥n|terraza|ventana",
                r"capacidad|personas|hu√©spedes|guests|ocupantes"
            ],
            "politicas": [
                r"pol√≠tica|pol√≠ticas|reglas|normas|rules",
                r"cancelaci√≥n|cancelar|cancel|reembolso|refund",
                r"mascotas|pets|animales|perros|gatos",
                r"fumar|smoking|no smoking|prohibido",
                r"ni√±os|children|kids|beb√©s|babies"
            ],
            "contacto": [
                r"contacto|contact|tel√©fono|phone|email|mail",
                r"llamar|escribir|comunicar|hablar",
                r"whatsapp|telegram|mensaje|message",
                r"propietario|owner|administrador|manager"
            ]
        }
        
        # Palabras clave para subcategor√≠as
        self.subcategory_patterns = {
            "precios_especificos": [
                r"noche|d√≠a|semana|mes|temporada|season",
                r"por persona|per person|individual|grupal"
            ],
            "servicios_especificos": [
                r"gratis|free|incluido|included|extra|adicional",
                r"horario|schedule|abierto|cerrado|disponible"
            ]
        }
    
    def _has_answered_topic(self, conversation_history: List[Dict], topic: str) -> bool:
        """Detecta si ya se respondi√≥ un tema espec√≠fico en la conversaci√≥n"""
        if not conversation_history:
            return False
            
        # Buscar mensajes del bot que contengan respuestas sobre el tema
        topic_keywords = {
            "disponibilidad": ["disponible", "disponibilidad", "habitaciones disponibles", "suites disponibles", "lugar", "libre"],
            "precios": ["precio", "cuesta", "costo", "tarifa", "ARS", "$", "pesos", "importe"]
        }
        
        keywords = topic_keywords.get(topic, [])
        if not keywords:
            return False
            
        for msg in conversation_history:
            # Solo revisar mensajes del asistente
            if msg.get("role") == "assistant" and msg.get("message"):
                message_content = msg["message"].lower()
                # Si encontramos 2 o m√°s keywords del tema, consideramos que fue tratado
                matches = sum(1 for keyword in keywords if keyword in message_content)
                if matches >= 2:
                    logger.info(f"üß† DEBUG CONVERSACIONAL - Tema '{topic}' ya tratado en: '{msg['message'][:100]}...'")
                    return True
        
        return False
    
    def _has_new_dates_in_message(self, message: str, previous_dates: Dict[str, Any]) -> bool:
        """Detecta si el mensaje contiene fechas nuevas diferentes a las ya tratadas"""
        # Patrones b√°sicos para detectar fechas en el mensaje
        date_patterns = [
            r'\d{1,2}[-/]\d{1,2}[-/]\d{2,4}',  # 25/07/2025
            r'\d{1,2}\s+de\s+\w+',            # 25 de julio
            r'\w+\s+\d{1,2}',                 # julio 25
            r'ma√±ana|hoy|pasado ma√±ana',       # fechas relativas
            r'pr√≥xim[ao]\s+\w+',              # pr√≥ximo viernes
        ]
        
        message_lower = message.lower()
        has_dates_in_message = any(re.search(pattern, message_lower) for pattern in date_patterns)
        
        if not has_dates_in_message:
            logger.info(f"üß† DEBUG CONVERSACIONAL - No hay fechas nuevas en el mensaje")
            return False
            
        # Si hay fechas en el mensaje, asumir que son nuevas (simplificado)
        logger.info(f"üß† DEBUG CONVERSACIONAL - Detectadas fechas nuevas en el mensaje")
        return True

    async def classify_query(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """Clasifica una consulta en categor√≠as predefinidas considerando el contexto conversacional"""
        try:
            message_lower = message.lower()
            
            # üéØ DETECTAR SI RESPUESTA YA FUE INTERCEPTADA 
            query_params = context.get("query_params", {}) if context else {}
            if query_params.get("intercepted_guest_response"):
                logger.info(f"üéØ CLASIFICADOR - Respuesta de hu√©spedes ya interceptada, forzando proceso_reserva")
                return "proceso_reserva"
            
            # üß† MEMORIA CONVERSACIONAL - obtener historial para contexto
            conversation_history = []
            if context:
                # Obtener historial del frontend o sesi√≥n
                frontend_conv = context.get("frontend_conversation", {})
                if frontend_conv.get("recent_messages"):
                    conversation_history = frontend_conv["recent_messages"]
                elif context.get("session_context", {}).get("recent_messages"):
                    conversation_history = context["session_context"]["recent_messages"]
            
            # üß† CLASIFICACI√ìN NORMAL
            
            # Detectar temas ya tratados
            has_answered_availability = self._has_answered_topic(conversation_history, "disponibilidad")
            has_answered_prices = self._has_answered_topic(conversation_history, "precios")
            has_new_dates = self._has_new_dates_in_message(message, context.get("query_params", {}))
            
            logger.info(f"üß† DEBUG CONVERSACIONAL - Disponibilidad tratada: {has_answered_availability}")
            logger.info(f"üß† DEBUG CONVERSACIONAL - Precios tratados: {has_answered_prices}")
            logger.info(f"üß† DEBUG CONVERSACIONAL - Fechas nuevas: {has_new_dates}")
            
            # üéØ APLICAR L√ìGICA CONVERSACIONAL: Determinar categor√≠as a omitir
            excluded_categories = []
            if has_answered_availability and not has_new_dates:
                excluded_categories.append("disponibilidad")
                logger.info(f"üß† DEBUG CONVERSACIONAL - OMITIENDO categor√≠a 'disponibilidad' (ya tratada)")
                
            if has_answered_prices and not has_new_dates:
                excluded_categories.append("precios")
                logger.info(f"üß† DEBUG CONVERSACIONAL - OMITIENDO categor√≠a 'precios' (ya tratada)")
            
            # Si omitimos disponibilidad/precios, priorizar proceso_reserva
            should_prioritize_reserva = len(excluded_categories) > 0
            if should_prioritize_reserva:
                logger.info(f"üß† DEBUG CONVERSACIONAL - PRIORIZANDO 'proceso_reserva' por contexto conversacional")
                
                # üéØ BOOST PARA PROCESO_RESERVA: Si hay palabras b√°sicas de reserva, dar score alto
                reserva_basic_keywords = ["reservar", "reserva", "quiero", "me interesa", "proceder", "confirmar"]
                if any(keyword in message_lower for keyword in reserva_basic_keywords):
                    logger.info(f"üß† DEBUG CONVERSACIONAL - DETECTADAS palabras de reserva con contexto omitido ‚Üí FORZANDO proceso_reserva")
            
            # üîß PASO 1: Calcular puntuaciones para patrones expl√≠citos (excluyendo categor√≠as omitidas)
            scores = {}
            for category, patterns in self.classification_patterns.items():
                # üß† OMITIR categor√≠as ya tratadas
                if category in excluded_categories:
                    logger.info(f"üß† DEBUG CONVERSACIONAL - SALTANDO categor√≠a '{category}' (ya tratada)")
                    continue
                    
                score = self._calculate_category_score(message_lower, patterns)
                if score > 0:
                    scores[category] = score
                    logger.info(f"üîç DEBUG - Categor√≠a '{category}' score: {score}")
            
            # üß† CASO ESPECIAL: Si omitimos categor√≠as y hay palabras de reserva pero sin scores
            if not scores and should_prioritize_reserva:
                reserva_basic_keywords = ["reservar", "reserva", "quiero", "me interesa", "proceder", "confirmar"]
                if any(keyword in message_lower for keyword in reserva_basic_keywords):
                    logger.info(f"üß† DEBUG CONVERSACIONAL - SIN SCORES pero con contexto omitido + palabras reserva ‚Üí FORZANDO proceso_reserva")
                    return "proceso_reserva"
            
            # Si no hay puntuaciones, es consulta general
            if not scores:
                logger.info(f"üîç DEBUG - Sin scores, clasificando como general")
                return "general"
            
            # üß† BOOST CONVERSACIONAL: Mejorar score de proceso_reserva si hay contexto omitido
            if should_prioritize_reserva and "proceso_reserva" in scores:
                reserva_basic_keywords = ["reservar", "reserva", "quiero", "me interesa", "proceder", "confirmar"]
                if any(keyword in message_lower for keyword in reserva_basic_keywords):
                    original_score = scores["proceso_reserva"]
                    # Boost significativo para ganar empates y competir
                    scores["proceso_reserva"] = min(original_score + 0.3, 1.0)
                    logger.info(f"üß† DEBUG CONVERSACIONAL - BOOST aplicado a proceso_reserva: {original_score:.3f} ‚Üí {scores['proceso_reserva']:.3f}")
            
            # Obtener categor√≠a con mayor puntuaci√≥n
            max_score = max(scores.values())
            categories_with_max_score = [cat for cat, score in scores.items() if score == max_score]
            
            # üö® RESOLVER EMPATES: proceso_reserva tiene PRIORIDAD ABSOLUTA
            if len(categories_with_max_score) > 1:
                logger.info(f"üéØ DEBUG EMPATE - Categor√≠as con score {max_score}: {categories_with_max_score}")
                
                # Si proceso_reserva est√° entre las empatadas, priorizarla
                if "proceso_reserva" in categories_with_max_score:
                    best_category = "proceso_reserva"
                    logger.info(f"üéØ DEBUG EMPATE RESUELTO - Priorizando 'proceso_reserva' sobre: {[c for c in categories_with_max_score if c != 'proceso_reserva']}")
                else:
                    best_category = categories_with_max_score[0]
            else:
                best_category = categories_with_max_score[0]
                
            logger.info(f"üîç DEBUG - Mejor categor√≠a por patrones: '{best_category}' (score: {scores[best_category]})")
            
            # üîß PASO 2: Verificar si hay clasificaci√≥n EXPL√çCITA con umbral suficiente
            high_confidence_threshold = 0.4  # Umbral alto para clasificaciones expl√≠citas
            
            # Para consultas de hospedaje_servicios o habitacion_servicios con alta confianza
            if best_category in ["hospedaje_servicios", "habitacion_servicios"] and scores[best_category] >= high_confidence_threshold:
                logger.info(f"üîç DEBUG - Clasificaci√≥n EXPL√çCITA con alta confianza: {best_category}")
                return best_category
            
            # Para consultas de precios con umbral m√°s bajo
            if best_category == "precios" and scores[best_category] >= 0.15:
                logger.info(f"üîç DEBUG - Consulta clasificada como PRECIOS con score: {scores[best_category]}")
                return best_category
            
            # Para otras categor√≠as con umbral est√°ndar
            if scores[best_category] >= 0.3:
                logger.info(f"üîç DEBUG - Clasificaci√≥n por umbral est√°ndar: {best_category}")
                return best_category
            
            # üîß PASO 3: SOLO SI ES AMBIGUA, usar contexto para resolver
            logger.info(f"üîç DEBUG - Consulta ambigua (score bajo), analizando contexto...")
            context_influenced_category = self._analyze_context_for_ambiguous_queries(message_lower, context)
            if context_influenced_category:
                logger.info(f"üîç DEBUG - Clasificaci√≥n influenciada por contexto: {context_influenced_category}")
                return context_influenced_category
            
            # üîß PASO 4: Verificar palabras clave de precio como fallback
            price_keywords = ["precio", "costo", "tarifa", "cuanto", "cu√°nto", "valor", "importe", "sale", "abonar", "pagar", "cobran", "dinero"]
            if any(keyword in message_lower for keyword in price_keywords):
                logger.info(f"üîç DEBUG - Forzando clasificaci√≥n como PRECIOS por palabras clave detectadas")
                return "precios"
            
            logger.info(f"üîç DEBUG - Defaulteando a general")
            return "general"
            
        except Exception as e:
            logger.error(f"Error clasificando consulta: {e}")
            return "general"
    
    def _calculate_category_score(self, message: str, patterns: List[str]) -> float:
        """Calcula puntuaci√≥n para una categor√≠a espec√≠fica"""
        total_matches = 0
        total_words = len(message.split())
        unique_patterns_matched = 0
        
        for pattern in patterns:
            matches = re.findall(pattern, message, re.IGNORECASE)
            if matches:
                total_matches += len(matches)
                unique_patterns_matched += 1
        
        # Normalizar por longitud del mensaje
        if total_words == 0:
            return 0.0
        
        # üÜï ALGORITMO MEJORADO PARA CONSULTAS DE PRECIOS
        # Para consultas de precios, usar un algoritmo menos estricto
        if any(keyword in message.lower() for keyword in ["precio", "costo", "tarifa", "cuanto", "cu√°nto", "valor", "importe", "sale", "abonar", "pagar"]):
            # Para consultas de precios: Si encuentra palabras clave, dar puntuaci√≥n alta
            if total_matches > 0:
                # Puntuaci√≥n base alta si hay matches de precio
                base_score = 0.8
                # Bonus por m√∫ltiples patrones √∫nicos
                pattern_bonus = min(unique_patterns_matched * 0.1, 0.2)
                # Ajuste suave por longitud (menos penalizante)
                length_adjustment = max(0.7, 1.0 - (total_words * 0.05))
                
                final_score = min((base_score + pattern_bonus) * length_adjustment, 1.0)
                logger.info(f"üîç DEBUG SCORE PRECIOS - Mensaje: '{message}' | Matches: {total_matches} | Patrones √∫nicos: {unique_patterns_matched} | Score: {final_score}")
                return final_score
        
        # üîß ALGORITMO MEJORADO PARA CONSULTAS DE SERVICIOS
        # Para consultas de servicios: usar algoritmo menos penalizante por longitud
        if any(service_keyword in message.lower() for service_keyword in ["servicios", "comodidades", "amenities", "instalaciones", "facilidades"]):
            if total_matches > 0:
                # Puntuaci√≥n base alta si hay matches de servicios
                base_score = 0.6
                # Bonus por m√∫ltiples patrones √∫nicos
                pattern_bonus = min(unique_patterns_matched * 0.15, 0.3)
                # Ajuste MUY suave por longitud (menos penalizante)
                length_adjustment = max(0.8, 1.0 - (total_words * 0.02))
                
                final_score = min((base_score + pattern_bonus) * length_adjustment, 1.0)
                logger.info(f"üîç DEBUG SCORE SERVICIOS - Mensaje: '{message}' | Matches: {total_matches} | Patrones √∫nicos: {unique_patterns_matched} | Score: {final_score}")
                return final_score

        # üÜï ALGORITMO ESPECIAL PARA CONSULTAS DE PROCESO_RESERVA
        # Para consultas de proceso de reserva: dar puntuaci√≥n alta cuando hay intenci√≥n clara
        if any(reserva_keyword in message.lower() for reserva_keyword in ["reservar", "reserva", "proceder", "confirmar", "asegurar", "apartar"]):
            if total_matches > 0:
                # Puntuaci√≥n base muy alta para reservas (intenci√≥n cr√≠tica)
                base_score = 0.7
                # Bonus por m√∫ltiples patrones √∫nicos
                pattern_bonus = min(unique_patterns_matched * 0.2, 0.3)
                # Ajuste muy suave por longitud (casi sin penalizaci√≥n)
                length_adjustment = max(0.85, 1.0 - (total_words * 0.01))
                
                final_score = min((base_score + pattern_bonus) * length_adjustment, 1.0)
                logger.info(f"üîç DEBUG SCORE PROCESO_RESERVA - Mensaje: '{message}' | Matches: {total_matches} | Patrones √∫nicos: {unique_patterns_matched} | Score: {final_score}")
                return final_score

        # Para otras categor√≠as: usar algoritmo original
        return min(float(total_matches) / float(total_words), 1.0)
    
    def get_query_intent(self, message: str) -> Dict[str, Any]:
        """Analiza la intenci√≥n espec√≠fica de la consulta"""
        try:
            message_lower = message.lower()
            
            subcategories: List[str] = []
            
            intent = {
                "primary_category": "general",
                "subcategories": subcategories,
                "entities": self._extract_entities(message),
                "urgency": self._assess_urgency(message_lower),
                "sentiment": self._assess_sentiment(message_lower),
                "requires_dates": self._requires_dates(message_lower),
                "requires_numbers": self._requires_numbers(message_lower)
            }
            
            # Clasificar categor√≠a principal - remover await ya que no es async
            scores = {}
            for category, patterns in self.classification_patterns.items():
                score = self._calculate_category_score(message_lower, patterns)
                if score > 0:
                    scores[category] = score
            
            if scores:
                best_category = max(scores.keys(), key=lambda x: scores[x])
                if scores[best_category] >= 0.3:
                    intent["primary_category"] = best_category
            
            # Identificar subcategor√≠as
            for subcat, patterns in self.subcategory_patterns.items():
                if any(re.search(pattern, message_lower, re.IGNORECASE) for pattern in patterns):
                    subcategories.append(subcat)
            
            return intent
            
        except Exception as e:
            logger.error(f"Error analizando intenci√≥n: {e}")
            return {"primary_category": "general", "subcategories": [], "entities": {}}
    
    def _extract_entities(self, message: str) -> Dict[str, List[str]]:
        """Extrae entidades espec√≠ficas del mensaje"""
        entities = {
            "dates": [],
            "numbers": [],
            "locations": [],
            "amenities": []
        }
        
        # Extraer fechas
        date_patterns = [
            r'\d{1,2}[/\-]\d{1,2}[/\-]\d{2,4}',
            r'\d{1,2}\s+de\s+\w+',
            r'ma√±ana|pasado ma√±ana|hoy|ayer',
            r'lunes|martes|mi√©rcoles|jueves|viernes|s√°bado|domingo'
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, message, re.IGNORECASE)
            entities["dates"].extend(matches)
        
        # Extraer n√∫meros
        number_patterns = [
            r'\d+\s*personas?',
            r'\d+\s*hu√©spedes?',
            r'\d+\s*noches?',
            r'\d+\s*d√≠as?'
        ]
        
        for pattern in number_patterns:
            matches = re.findall(pattern, message, re.IGNORECASE)
            entities["numbers"].extend(matches)
        
        # Extraer ubicaciones
        location_patterns = [
            r'centro|downtown|ciudad|pueblo',
            r'playa|beach|monta√±a|mountain',
            r'aeropuerto|airport|estaci√≥n|station'
        ]
        
        for pattern in location_patterns:
            matches = re.findall(pattern, message, re.IGNORECASE)
            entities["locations"].extend(matches)
        
        # Extraer amenidades espec√≠ficas
        amenity_patterns = [
            r'wifi|internet|piscina|pileta|parking|estacionamiento',
            r'desayuno|comida|restaurant|bar',
            r'aire acondicionado|calefacci√≥n|tv|television'
        ]
        
        for pattern in amenity_patterns:
            matches = re.findall(pattern, message, re.IGNORECASE)
            entities["amenities"].extend(matches)
        
        return entities
    
    def _assess_urgency(self, message: str) -> str:
        """Eval√∫a la urgencia de la consulta"""
        urgent_keywords = [
            r'urgente|emergency|ahora|now|ya|inmediatamente',
            r'hoy|today|ma√±ana|tomorrow',
            r'necesito|need|require|requiero'
        ]
        
        for pattern in urgent_keywords:
            if re.search(pattern, message, re.IGNORECASE):
                return "high"
        
        return "normal"
    
    def _assess_sentiment(self, message: str) -> str:
        """Eval√∫a el sentimiento del mensaje"""
        positive_keywords = [
            r'gracias|thank|perfecto|excelente|genial|bueno',
            r'me gusta|love|encanta|feliz|contento'
        ]
        
        negative_keywords = [
            r'problema|problem|mal|bad|terrible|horrible',
            r'no funciona|broken|roto|molesto|enojado'
        ]
        
        positive_score = sum(1 for pattern in positive_keywords 
                           if re.search(pattern, message, re.IGNORECASE))
        
        negative_score = sum(1 for pattern in negative_keywords 
                           if re.search(pattern, message, re.IGNORECASE))
        
        if positive_score > negative_score:
            return "positive"
        elif negative_score > positive_score:
            return "negative"
        else:
            return "neutral"
    
    def _requires_dates(self, message: str) -> bool:
        """Determina si la consulta requiere informaci√≥n de fechas"""
        date_required_patterns = [
            r'disponible|libre|reservar|booking',
            r'cuando|cu√°ndo|fecha|d√≠a',
            r'check.?in|check.?out|llegada|salida'
        ]
        
        return any(re.search(pattern, message, re.IGNORECASE) 
                  for pattern in date_required_patterns)
    
    def _requires_numbers(self, message: str) -> bool:
        """Determina si la consulta requiere informaci√≥n num√©rica"""
        number_required_patterns = [
            r'precio|costo|tarifa|cuanto|cu√°nto',
            r'capacidad|personas|hu√©spedes',
            r'distancia|kil√≥metros|metros'
        ]
        
        return any(re.search(pattern, message, re.IGNORECASE) 
                  for pattern in number_required_patterns)
    
    def get_suggested_followup_questions(self, category: str) -> List[str]:
        """Sugiere preguntas de seguimiento basadas en la categor√≠a"""
        followup_questions = {
            "precios": [
                "¬øPara qu√© fechas necesitas la informaci√≥n?",
                "¬øCu√°ntas personas ser√≠an?",
                "¬øTe interesa alguna promoci√≥n especial?"
            ],
            "disponibilidad": [
                "¬øQu√© fechas tienes en mente?",
                "¬øCu√°ntas noches te gustar√≠a quedarte?",
                "¬øPrefieres alg√∫n tipo de habitaci√≥n en particular?"
            ],
            "servicios": [
                "¬øHay alg√∫n servicio espec√≠fico que te interese?",
                "¬øNecesitas informaci√≥n sobre horarios?",
                "¬øTienes alguna necesidad especial?"
            ],
            "ubicacion": [
                "¬øDesde d√≥nde vas a venir?",
                "¬øPrefieres caminar o usar transporte?",
                "¬øHay alg√∫n lugar espec√≠fico que quieras visitar?"
            ]
        }
        
        return followup_questions.get(category, [
            "¬øEn qu√© m√°s te puedo ayudar?",
            "¬øTienes alguna otra consulta?",
            "¬øNecesitas informaci√≥n adicional?"
        ]) 

    def _analyze_context_for_ambiguous_queries(self, message: str, context: Optional[Dict[str, Any]]) -> Optional[str]:
        """Analiza el contexto para resolver consultas ambiguas sobre servicios"""
        try:
            if not context:
                return None
            
            # üîß EXCLUSI√ìN CR√çTICA: Si es claramente una consulta de precio, NO aplicar l√≥gica de servicios
            price_keywords = ["precio", "costo", "tarifa", "cuanto", "cu√°nto", "valor", "importe", "sale", "abonar", "pagar", "cobran", "dinero"]
            if any(keyword in message.lower() for keyword in price_keywords):
                logger.info(f"üîç DEBUG - Consulta contiene palabras clave de PRECIO, NO aplicando l√≥gica de servicios contextuales")
                return None  # Dejar que el clasificador normal maneje esto
            
            # Detectar consultas ambiguas de servicios (solo si NO es consulta de precio)
            servicios_ambiguos = [
                r"servicios?(?!\s+(del\s+hospedaje|del\s+hotel|generales|comunes))",
                r"que.*tiene(?!\s+(el\s+hospedaje|el\s+hotel|el\s+lugar))",
                r"cuenta\s+con(?!\s+(el\s+hospedaje|el\s+hotel|el\s+lugar))",
                r"incluye(?!\s+(el\s+hospedaje|el\s+hotel|la\s+estadia))",
                r"comodidades?(?!\s+(del\s+hospedaje|del\s+hotel|generales))",
                r"amenities?(?!\s+(del\s+hospedaje|del\s+hotel|generales))"
            ]
            
            is_ambiguous_service_query = any(
                re.search(pattern, message, re.IGNORECASE) 
                for pattern in servicios_ambiguos
            )
            
            if not is_ambiguous_service_query:
                return None
            
            logger.info(f"üîç DEBUG - Consulta de servicios ambigua detectada: '{message}'")
            
            # üîß PRIORIDAD M√ÅXIMA: Revisar el contexto h√≠brido del frontend (m√°s actualizado)
            current_query = context.get("currentQuery", {})
            if current_query:
                habitacion_contexto = current_query.get("habitacion")
                logger.info(f"üîç DEBUG - Habitaci√≥n en currentQuery: {habitacion_contexto}")
                
                # Si la habitaci√≥n es expl√≠citamente undefined/None, es consulta del hospedaje
                if habitacion_contexto is None or habitacion_contexto == "undefined":
                    logger.info(f"üîç DEBUG - Contexto h√≠brido indica consulta GENERAL del hospedaje (habitaci√≥n limpiada)")
                    return "hospedaje_servicios"
                
                # Si hay habitaci√≥n espec√≠fica, es consulta de habitaci√≥n
                if habitacion_contexto and habitacion_contexto != "undefined":
                    logger.info(f"üîç DEBUG - Contexto h√≠brido indica habitaci√≥n espec√≠fica: {habitacion_contexto}")
                    return "habitacion_servicios"
            else:
                logger.info(f"üîç DEBUG - No hay currentQuery en contexto, continuando con otras verificaciones")
            
            # 1. SOLO si no hay contexto h√≠brido, revisar contexto del frontend (mensajes recientes)
            frontend_conversation = context.get("frontend_conversation", {})
            if frontend_conversation:
                recent_messages = frontend_conversation.get("recent_messages", [])
                for msg in recent_messages:
                    if msg.get("role") == "assistant":
                        bot_response = msg.get("message", "").lower()
                        # Si mencion√≥ habitaciones espec√≠ficas, asumir que se refiere a habitaci√≥n
                        if any(word in bot_response for word in ["suite", "habitaci√≥n", "cuarto", "room"]):
                            logger.info(f"üîç DEBUG - Contexto frontend (sin h√≠brido) indica habitaci√≥n espec√≠fica")
                            return "habitacion_servicios"
            
            # 2. Contexto de sesi√≥n de BD (solo si no hay informaci√≥n m√°s reciente)
            session_context = context.get("session_context", {})
            if session_context:
                # Si hay habitaci√≥n mencionada en el contexto
                if session_context.get("last_habitacion"):
                    logger.info(f"üîç DEBUG - Contexto BD indica habitaci√≥n: {session_context.get('last_habitacion')}")
                    return "habitacion_servicios"
                
                # Si hay disponibilidad confirmada, probablemente se refiere a esa habitaci√≥n
                if session_context.get("last_availability"):
                    logger.info(f"üîç DEBUG - Contexto BD indica disponibilidad previa confirmada")
                    return "habitacion_servicios"
            
            # 3. Si hay informaci√≥n de habitaci√≥n espec√≠fica en el contexto
            if context.get("habitacion_especifica"):
                logger.info(f"üîç DEBUG - Hay habitaci√≥n espec√≠fica en contexto")
                return "habitacion_servicios"
            
            # 4. Si hay disponibilidad real con una sola habitaci√≥n
            availability_real = context.get("availability_real", {})
            if availability_real:
                hospedaje_disp = availability_real.get("hospedaje_disponibilidad", {})
                detalle_habitaciones = hospedaje_disp.get("detalle_habitaciones", [])
                if len(detalle_habitaciones) == 1:
                    logger.info(f"üîç DEBUG - Una sola habitaci√≥n disponible, asumir servicios de habitaci√≥n")
                    return "habitacion_servicios"
            
            # 5. DEFAULT: Si no hay contexto espec√≠fico, asumir hospedaje
            logger.info(f"üîç DEBUG - Sin contexto espec√≠fico, defaultear a servicios del hospedaje")
            return "hospedaje_servicios"
            
        except Exception as e:
            logger.error(f"Error analizando contexto para consultas ambiguas: {e}")
            return None 