services:
  # ================================
  # BASE DE DATOS POSTGRESQL (COMENTADO - USANDO PostgreSQL LOCAL)
  # ================================
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: staycumbrecita-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: ${DB_DATABASE}
  #     POSTGRES_USER: ${DB_USERNAME}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./backendStayCumbrecita/sql:/docker-entrypoint-initdb.d
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # ================================
  # BACKEND NESTJS
  # ================================
  backend:
    build:
      context: ./backendStayCumbrecita
      dockerfile: Dockerfile
      target: runtime
    container_name: staycumbrecita-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    env_file:
      - ./backendStayCumbrecita/.env
    environment:
      # Configuración específica para Docker
      NODE_ENV: production
      PORT: 5001
      HOST: 0.0.0.0
      
      # Base de datos (override para Docker) - Conectar a PostgreSQL local
      DB_HOST: host.docker.internal
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      
      # Encriptación y seguridad
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      ENCRYPTION_IV: ${ENCRYPTION_IV}
      SALT_ROUNDS: ${SALT_ROUNDS}
      SECRET_PEPPER: ${SECRET_PEPPER}
      
      # Cloudinary
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      
      # Gmail
      GMAIL_HOST: ${GMAIL_HOST}
      GMAIL_PORT: ${GMAIL_PORT}
      GMAIL_USER: ${GMAIL_USER}
      GMAIL_PASS: ${GMAIL_PASS}
      GMAIL_SECURE: ${GMAIL_SECURE}
      GMAIL_FROM: ${GMAIL_FROM}
      
      # URLs para Docker
      APP_NAME: ${APP_NAME}
      APP_BACKEND_URL: http://backend:5001
      APP_FRONTEND_URL: http://localhost:3000
      
      # CORS para Docker
      FRONTEND_URL: http://localhost:3000
      ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs

    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # FRONTEND NEXTJS
  # ================================
  frontend:
    build:
      context: ./frontendStayCumbrecita
      dockerfile: Dockerfile
      target: runtime
      args:
        - NEXT_PUBLIC_MAPS_API_GOOGLE_KEY=${NEXT_PUBLIC_MAPS_API_GOOGLE_KEY}
    container_name: staycumbrecita-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./frontendStayCumbrecita/.env.local
    environment:
      # Configuración específica para Docker
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_TELEMETRY_DISABLED: 1
      
      # API URLs (override para Docker)
      NEXT_PUBLIC_API_URL: http://localhost:5001
      NEXT_PUBLIC_FRONTEND_URL: http://localhost:3000
      
      # URL interna para SSR (comunicación entre contenedores)
      INTERNAL_API_URL: http://backend:5001
      
      # Google Maps API Key
      NEXT_PUBLIC_MAPS_API_GOOGLE_KEY: ${NEXT_PUBLIC_MAPS_API_GOOGLE_KEY}

    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # CHATBOT PYTHON/FASTAPI
  # ================================
  chatbot:
    build:
      context: ./stayCumbrecita-chatbot
      dockerfile: Dockerfile
    container_name: staycumbrecita-chatbot
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Base de datos - variables individuales como espera config.py
      - DB_HOST=host.docker.internal
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      
      # Credenciales de encriptación (mismas del backend)
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_IV=${ENCRYPTION_IV}
      - SALT_ROUNDS=${SALT_ROUNDS}
      - SECRET_PEPPER=${SECRET_PEPPER}
      
      # OpenAI API - IMPORTANTE: configura tu API key real
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Backend API
      - BACKEND_URL=http://backend:5001
      
      # Frontend URL (para generar URLs de checkout)
      - FRONTEND_URL=http://localhost:3000
      
      # Configuración del chatbot
      - ENVIRONMENT=production
      - EMBEDDING_MODEL=text-embedding-3-small
      - MAX_TOKENS=500
      - TEMPERATURE=0.3
      - MAX_CONTEXT_LENGTH=4000
    volumes:
      - chatbot_uploads:/app/uploads
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s



  # ================================
  # REDIS (OPCIONAL - Para cache)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: staycumbrecita-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

# ================================
# VOLUMES
# ================================
volumes:
  # postgres_data:
  #   driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  chatbot_uploads:
    driver: local
  redis_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 